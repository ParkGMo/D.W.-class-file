--React Hooks--
 - [변수명, 함수명] = useState(초기값)  --> 함수 내부를 다시 랜더링한 후 innerHTML , 비동기 통신의 결과를 기다려주는 역할
                                           // usEffect 실행시점
                                           // 1. 최초 렌더링시
                                           // 2. 디펜던시 리스트에 들어있는 값이 변경될 때
                                           // 3. 컴포넌트가 unmount 될때
 - useEffect(함수, []) // 비동기로 실행, (함수  , [] ): 함수실행 --> [] 변경확인 --> 다시 함수 실행
 - useRef() : 자바스크립트의 순수 요소를 사용하기위해, 실행 태그에  ref={} 작성 ex)querySelector 
 - useContext() : 
    1. context생성 : createContext() 사용
    1. context사용 : useContext(사용할 context) 사용
    파라미터에 context객체를 넣어주어야한다. , createContext()를 전역에서 가져옴
     --> 전역으로 사용할 수 있도록 한다. ex)const { locale } = useContext(LocaleContext); 여러 파일에서 사용가능
 - useParams() : route의 path=:*** 과 , 컴포넌트의 to={***}을 가져온다.
 - useLocation() : prop으로 받을 수 없는 간단한 정보들을 가져온다. 중요 정보가 없을 때 사용
 - useNavigate() : 원하는 곳으로 이동하는 함수, 
    --> ("/" -> 원하는 경로, /가 없으면 주소 끝에 변경, {replace: true} -> 뒤로가기 불가) 
 - useReducer() : const [state, dispatch] = useReducer(reducer함수,  state함수), 여러 개의 조건으로 useState역할을 한다,
                   -> 이점 : 예측 가능하게 해준다. 상태 변경이 예측 가능하고 일관성 있게 이루어진다.
                   -> 중앙 집중화된 관리 : 여러 상태를 하나의 리듀서에서 관리하거나 , 여러 리듀서를 조합 -> 관리
                   -> 모든 상태 변경이 하나의 통로(dispatch를 통한 action에 전달 )로 관리
                   -> 상태 관리의 복잡성이 줄어들고, 상태 변경이 어디에서 이루어지는지를 쉽게 추적할 수 있다.
                   -> 코드 모듈화 , 재사용 ....

--firebase Hooks--
    * react-firebase-hook --> https://www.npmjs.com/package/react-firebase-hooks (버전확인 필수!!)
      -> npm install react-firebase-hooks
