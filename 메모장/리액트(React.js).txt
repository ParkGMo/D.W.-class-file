--React--
 - frameWork : 만들어진 틀에 맞추어 사용 ex)집 - 인테리어
 - Library(API) : 개발자가 직접 사용 ex) 집 설계
 - Class(=Interface) -> 프로그램의 기본 개념
 - 17~18은 현재 쓰고 있는거! 이전버젼은 공식문서 확인

 react order!
 index.html --> index.js --> root.render(<App />) --> App component --> App.js

 특정 레이이아웃 headers나 footer와 같은 모든페이지에 똑같이 들어감 
   --> Header.js, Footer.js (앞 대문자!) <태그>형식으로 불러옴 = shadow DOM (real DOM, virtual DOM)

  MPA(Multi Page Application) : 기본 구성
  SPA(Single Page Application) : React

  MPA : 여러개의 .html들을 하나씩 새로 구성, 랜더링될때마다 .CSS .Js를 불러옴(사용할때만 불러옴 - 처음 Fast 후 Slow)

  SPA 장점 : 하나의 'index.html'에서 처음 랜더링할때만 .CSS .Js를 불러옴(모든파일을 불러온다. - 처음 Slow 후 Fast)

  * index.html
  <body>
  <div id = "root">
  </div>
  </body>

  *next.js 공부! or typeScript 


ctrl+`  --> 노드설치
1 node -v 확인
2 cd: change direct  // cd .. : 뒤로가기
  PS C:\Users\user1\Desktop\테스트> cd .\D.W.-class-file\
  PS C:\Users\user1\Desktop\테스트\D.W.-class-file> cd .\React-GM\
  *경로 자동완성 'Tab key'
3 npm install -g npm@10.8.1
  npm install react-scripts 
4 npx create-react-app 01-dice_game(파일명!)
5 y
6 cd 01-dice_game
7 npm run start  -> 실시간 서버 시작     , npm start -> 서버 시작
8 ctrl+c, y  -> 서버끝내기


*children : 기본적인 prop으로 태그사이의 있는 것을 전달해준다.

*서비스로직은 최상위 폴더에 작성!!

*컴포넌트 랜더링 !== 화면에 그려진다
 컴포넌트 코드 읽고
  -> 렌더링시 -> 마운트 -> 화면에 그림
 재렌더링시 컴포넌트가 언마운트 -> 렌더링 마운트 화면에 그려짐

 *같은 컴포넌트를 여러개 생성할 때는 key값을 부여한다. -> 컴포넌트를 구별하기 위해

*Context 파일은 전역적으로 연결되어 관리된다. ex) 한글버전 영어버전 전환
 - contexts폴더에 js파일 생성 --> index.js -> <js파일태그><App/></js파일태그>범위설정


npm install firebase --> firebase npm 방식 설치!
  - package.json --> "dependencies" --> "firebase" 설치 확인 가능!

npm install react-router-dom    --> 경로를 만들어준다.
 ex)<BrowserRouter>
      <Routes>
        <Route path="/">
          {/* "/" 이후에 없으면 Home으로 간다. */}
          <Route path="" element={<Home />} />
          <Route path="new" element={<New />} />
        </Route>
      </Routes>
    </BrowserRouter>

npm install styled-components
  scf -> 자동완성 
npm install styled-reset
${reset} -> css초기화

npm install classnames
  cn() -> cn이라는 변수명을 따로지정하고 파라미터에 여러개의 클래스를 넣을 수 있게 만들어준다.
   ex) import cn from "classnames";  -> <div className={cn(styles.container, className)}>{children}</div>

npm install dompurify
  import DOMPurify from "dompurify"; --> 악성코드 소독 (실행X)
  { __html: DOMPurify.sanitize(**) } 식으로 작성
      * dangerouslySetInnerHTML={}이것만 작성하면 태그안의 내용과 이벤트가 실행됨으로 
        -> {DOMPurify.sanitize(**)}로 작성하여 악성 코드를 막아준다.

npm install react-icons
 https://react-icons.github.io/react-icons/

 * react 배포
 git 
 (https://git-scm.com/download/win)

 -> Download for Windows  -> Standalone Installer -> 64-bit Git for Windows Setup. (vscode 끄고 설치!!)

 -> 명령프롬프트 git --version 입력 -> git version 2.45.2.windows.1 확인
 -> vscode 실행 -> 터미널 git --version 입력 -> git version 2.45.2.windows.1 확인

 -> package.json 파일 -> github 주소!(view on Github) -> <>coded의 https 주소 복사 
 -->package.json 파일에서 "homepage": "https://ParkGMo.github.io/D.W.-class-file/"(복사된 주소에서 앞의 양식으로 변경) 입력

 -> 터미널 파일 이동 -> npm install gh-pages -> "gh-pages": "^6.1.1" 확인! 

 -> npm run build -> build 폴더 생성 확인
// 배포 전 단계 

// deploy 실행 전 predeploy  실행하고 deploy는 서버에 올린다.
-> package.json 파일 -> 
"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build", --> 추가
    "deploy": "gh-pages -d build" --> 추가
  },

 * setting -> Pages -> Branch -> gh-pages선택

-> npm run deploy 로 실행  -> <BrowserRouter  basename={process.env.PUBLIC_URL}>( =="homepage"주소) 작성

* 페이지 이동 후 새로고침 404오류 --> 09 폴더에 404.html과 index.html을 가져온다.


** export <--> import
  : default가 없으면 중괄호{} 안에 작성해야한다. 
  
  export default <---> import  from "";
  export <---> import { } from "";

