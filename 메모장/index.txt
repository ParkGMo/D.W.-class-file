<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <style>
    * {
      box-sizing: border-box;
    }
    html,
    body,
    #wrapper {
      width: 100%;
      height: 100%;
    }
    body {
      margin: 0;
    }
  </style>
  <body>
    <div id="wrapper">
      <div id="header"></div>
      <ul id="nav"></ul>
      <div id="main"></div>
      <div id="footer"></div>
    </div>
  </body>
</html>

\\192.168.0.22\공유폴더\DW_DataVisualization3

https://flexboxfroggy.com/#ko 레이아웃연습

@font-face {
      font-family: "SBAggroB";
      src: url("https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2108@1.1/SBAggroB.woff")
        format("woff");
      font-weight: normal;
      font-style: normal;
    }

font-family: SBAggroB;

스타일 적용 우선순위
        1. important(9999999999999점)
        2. inling style(1000점)
        3. ID 선택자(100점)
        4. class 선택자 (10점)
        5. Tag 선택자(1점)
        6. *(전체)선택자(0점)
        같은 점수는 마지막 선택자를 선택 

a:link{}
a:visited{}
a:hover{}
a:active{}

* {box-sizing: border-box;}
html,body {width: 100%; height: 100%;}

<div id="wrapper">
    <div id="header"></div>
    <ul id="nav"></ul>
    <div id="main"></div>
    <div id="footer"></div>
</div>

https://boxicons.com/아이콘 사이트
lorem ipsum: test용 문구
lorem picsum: test용 이미지
https://threejs.org/ : 3D 

https://jsonplaceholder.typicode.com/ 객체와 비슷하나 key를 문자("")로 표시한다.
- https://jsonplaceholder.typicode.com/posts/1 : post 방식으로 get한다.  /1은 id가 1인 데이터만 얻는다.

/posts/1 : RESTful API 도메인 형태

관계형DB :  SQL(시스템 규모가 큰경우)
비관계형DB :  noneSQL(시스템 규모가 작은 경우)

부트스트랩 :https://getbootstrap.com/docs/5.2/getting-started/introduction/
css : https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css
Javascript : https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js
Button : https://bootswatch.com/default/

파이어베이스 
: https://firebase.google.com/?hl=ko
모듈식 : 함수를 사용하여 간단히 연결 : function느낌!
네임스페이스식 (직접기입) : 스크립트를 직접 가져와서 활용 -> 간단한 작업에 용이하나 복잡하면 ...
규칙 :
rules_version = '2';

service cloud.firestore {
  match /databases/{database: 데이터베이스 제목}/documents {
    match /{document=**} {
      allow read, write: if true; -> 다른사람이 일고 쓰기 가능 (true)
    }
  }
}

* Database >> Collection >> Document >> Field
firebase의 규칙에서 read,wirte --> true
https://refiapp.io/  --> firebase Tool(파일을 한번에 DB에 넣기)

 firebase의 storage --> 이미지를 따로 저장하여 경로를 가져온다.

실시간 날씨 API 사이트
https://openweathermap.org/api/one-call-3
API key : 6e3669d9ce0d4e84eddd41c90c38ab37


배포 : 외부에서도 확인할 수 있게 해주는 작업
 - html 파일을 만들어서 -> settings -> pages 
    -> Branch: main 확인 -> docs 저장후, root 저장 -> action deployment 초록체크 -> 배포완료

복붙이나 드래그 안될때!
F12 > Setting(톱니모양) > preferences > Debugger > Disablejavascript

CRUD
C : create
R : read
U : update
D : delete


중간 프로젝트 (6/12: 조편성 ~ 6/17: 초안 ~ 6/24: 중간 ~ 7/1:최종)

6/12: 조편성 및 주제선정
- * 주제선정 : 기존 웹 사이트의 불편한점이나 추가할만한 사항 제시
- 가상의 고객! (Persona) : 니즈들~
- 추가 예시들 제시(2page 패션 음식!)
- 프로젝트의 해결책 제시(detail) : **site-map 방식으로 
- 중간 최종까지의 계획방안
- 역할분담!
- *** ppt 준비 6/17까지 ***


React
 - frameWorek : 만들어진 틀에 맞추어 사용 ex)집 - 인테리어
 - Library(API) : 개발자가 직접 사용 ex) 집 설계
 - Class(=Interface) -> 프로그램의 기본 개념
 - 17~18은 현재 쓰고 있는거! 이전버젼은 공식문서 확인

  특정 레이이아웃 headers나 footer와 같은 모든페이지에 똑같이 들어감 
   --> Header.js, Footer.js (앞 대문자!) <태그>형식으로 불러옴 = shadow DOM (real DOM, vritual DOM)

  MPA(Multi Page Application) : 기본 구성
  SPA(Single Page Application) : React

  MPA : 여러개의 .html들을 하나씩 새로 구성, 랜더링될때마다 .CSS .Js를 불러옴(사용할때만 불러옴 - 처음 Fast 후 Slow)

  SPA 장점 : 하나의 'index.html'에서 처음 랜더링할때만 .CSS .Js를 불러옴(모든파일을 불러온다. - 처음 Slow 후 Fast)

  * index.html
  <body>
  <div id = "root">
  </div>
  </body>


ctrl+`  --> 노드설치
1 node -v 확인
2 cd: chage direct  // cd .. : 뒤로가기
  PS C:\Users\user1\Desktop\테스트> cd .\D.W.-class-file\
  PS C:\Users\user1\Desktop\테스트\D.W.-class-file> cd .\React-GM\
  *경로 자동완성 'Tab key'
3 npm install -g npm@10.8.1
  npm install react-scripts 
4 npx create-react-app 01-dice_game(파일명!)
5 y
6 cd 01-dice_game
7 npm run start  -> 실시간 서버 시작     , npm start -> 서버 시작
8 ctrl+c, y  -> 서버끝내기


*childern : 기본적인 prop으로 태그사이의 있는 것을 전달해준다.

*서비스로직은 최상위 폴더에 작성!!

*Context 파일은 전역적으로 연결되어 관리된다. ex) 한글버전 영어버전 전환
 - contexts폴더에 js파일 생성 --> index.js -> <js파일태그><App/></js파일태그>범위설정

* Hook 
 - [변수명, 함수명] = useState(초기값)  --> 함수 내부를 다시 랜더링한 후 innerHTML
  // usEffect 실행시점
  // 1. 최초 렌더링시
  // 2. 디펜던시 리스트에 들어있는 값이 변경될 때
  // 3. 컴포넌트가 unmount 될때
 - useEffect(함수, []) // 비동기로 실행, (함수  , [] ): 함수실행 --> [] 변경확인 --> 다시 함수 실행
 - useRef()
 - useContext() : 파라미터에 context객체를 넣어주어야한다.
     --> 전역으로 사용할 수 있도록 한다. ex)const { locale } = useContext(LocaleContext); 여러 파일에서 사용가능

npm install firebase --> firebase npm 방식 설치!
  - package.json --> "dependencies" --> "firebase" 설치 확인 가능!
